import { User, Check } from 'lucide-react';
import { Card } from '../types';

interface MappedUserInfo {
  fullName: string;
  type: string;
  photoUrl: string;
  idNumber: string;
  department: string;
  dob?: string;
}

interface UserInfo {
  name: string;
  identifier?: string;
  grade?: string;
  dob?: string;
  photo?: string;
  job_title?: string;
}

interface IDCardProps {
  card: Card;
  userInfo: UserInfo | null;
  className?: string;
  isSelected?: boolean;
  onToggleSelect?: (id: string) => void;
}

const IDCard = ({
  card,
  userInfo,
  className = '',
  isSelected = false,
  onToggleSelect,
}: IDCardProps) => {
  if (!userInfo) return null;
  
  // Map the userInfo properties to match the expected structure
  const mappedUserInfo: MappedUserInfo = {
    fullName: userInfo.name,
    type: card.user_type === 'student' ? 'Student' : 'Employee',
    photoUrl: userInfo.photo || '',
    idNumber: userInfo.identifier || '',
    department: userInfo.grade || userInfo.job_title || 'N/A',
    dob: userInfo.dob
  };

  const handleImageError = (e: React.SyntheticEvent<HTMLImageElement>) => {
    const target = e.target as HTMLImageElement;
    target.onerror = null;
    target.src = 'https://via.placeholder.com/150';
  };

  return (
    <div 
      className={`relative bg-white rounded-lg shadow-md overflow-hidden border-2 transition-all duration-200 ${
        isSelected ? 'border-blue-500 shadow-lg' : 'border-gray-200'
      } ${className}`}
    >
      {/* Card Header */}
      <div className="bg-blue-600 p-4 text-white">
        <div className="flex justify-between items-center">
          <h3 className="text-lg font-semibold">{mappedUserInfo.fullName}</h3>
          <span className="bg-white text-blue-600 text-xs px-2 py-1 rounded-full">
            {mappedUserInfo.type}
          </span>
        </div>
        {mappedUserInfo.idNumber && (
          <p className="text-sm opacity-80">{mappedUserInfo.idNumber}</p>
        )}
      </div>
      
      {/* Card Body */}
      <div className="p-4">
        <div className="flex items-center space-x-4 mb-4">
          <div className="w-24 h-24 bg-gray-200 rounded-full overflow-hidden">
            {mappedUserInfo.photoUrl ? (
              <img 
                src={mappedUserInfo.photoUrl} 
                alt={mappedUserInfo.fullName}
                className="w-full h-full object-cover"
                onError={handleImageError}
              />
            ) : (
              <div className="w-full h-full bg-gray-300 flex items-center justify-center">
                <User className="w-12 h-12 text-gray-500" />
              </div>
            )}
          </div>
          <div className="flex-1">
            <div className="mb-2">
              <p className="text-sm text-gray-500">Department</p>
              <p className="font-medium">{mappedUserInfo.department}</p>
            </div>
            {mappedUserInfo.dob && (
              <div className="mb-2">
                <p className="text-sm text-gray-500">Date of Birth</p>
                <p className="font-medium">{mappedUserInfo.dob}</p>
              </div>
            )}
          </div>
        </div>
      </div>
      
      {/* Card Footer */}
      <div className="bg-gray-50 p-4 border-t border-gray-200">
        <div className="flex items-center space-x-2 text-sm text-gray-600">
          <span className="px-2 py-1 bg-gray-100 rounded">
            {card.status.charAt(0).toUpperCase() + card.status.slice(1)}
          </span>
          <span>â€¢</span>
          <span>Expires: {new Date(card.expiry_date).toLocaleDateString()}</span>
        </div>
      </div>
      
      {/* Selection checkbox */}
      {onToggleSelect && (
        <div className="absolute top-2 right-2 z-10">
          <button
            onClick={() => onToggleSelect(card.id)}
            className={`w-6 h-6 rounded-full border-2 flex items-center justify-center transition-colors ${
              isSelected 
                ? 'bg-blue-500 border-blue-500 text-white' 
                : 'bg-white border-gray-300 text-transparent hover:border-blue-400'
            }`}
            aria-label={isSelected ? 'Deselect card' : 'Select card'}
          >
            <Check className="w-4 h-4" />
          </button>
        </div>
      )}
    </div>
  );
};

export default IDCard;
